"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.box = box;

var _cliBoxes = _interopRequireDefault(require("cli-boxes"));

var _colors = _interopRequireDefault(require("colors"));

var _extraBoxes = require("./extraBoxes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Function getContent
 * Get the formatted content for the passed message
 * @todo update to use str.padStart() and str.padEnd()
 * @ignore internal helper
 * @param {string} msg
 * @param {number} maxlength
 * @param {object} borders
 * @param {number} padding
 * @return {string}
 */
var getContent = function getContent(msg, maxlength, borders, padding) {
  var matchPattern = new RegExp("(.{".concat(maxlength, "})"), 'gi');
  return msg.split('\n').map(function (line) {
    return line.length > maxlength ? line.replace(matchPattern, '$1\n') : line;
  }).join('\n').split('\n').map(function (line) {
    var bits = line.match(/(\x1b\[.{1,2}m)/gi) ? line.match(/(\x1b\[.{1,2}m)/gi).length : 0;
    var extra = parseInt(maxlength - line.length + parseInt(bits * 5, 10), 10);
    var content = "".concat(' '.repeat(padding / 2)).concat(line).concat(' '.repeat(padding / 2));
    return line.length < maxlength ? "".concat(borders.vertical).concat(content).concat(' '.repeat(extra)).concat(borders.vertical) : "".concat(borders.vertical).concat(content).concat(borders.vertical);
  });
};
/**
 * Function getMaxLength
 * Get the max length for line based on longest line or the console width
 * @ignore internal helper
 * @param {array} msgArray
 * @param {number} padding
 * @param {number} minWidth
 * @param {number} maxWidth
 */


var getMaxLength = function getMaxLength(msgArray, padding, minWidth, maxWidth) {
  var lineLength = msgArray.reduce(function (acc, curr) {
    return curr.length > acc ? curr.length : acc;
  }, 0) + padding;
  var maxlengthContent = lineLength > minWidth ? lineLength : minWidth;
  var maxViewport = maxWidth < process.stdout.columns ? maxWidth : process.stdout.columns;
  return maxlengthContent < maxViewport ? maxlengthContent : maxViewport - 2 * padding;
};
/**
 * Function draw
 * Draws the box given the dimensions, borders and message
 * @ignore internal helper
 * @param {string} msg
 * @param {object} borders
 * @param {number} padding
 * @param {number} minWidth
 * @param {number} maxWidth
 */


var draw = function draw(msg, borders, padding, minWidth, maxWidth) {
  // --
  var shape = [];
  var msgArray = msg.split('\n');
  var maxlength = getMaxLength(msgArray, padding, minWidth, maxWidth);
  var borderHorizontal = "".concat(borders.horizontal.repeat(maxlength + padding));
  var blanklines = "".concat(' '.repeat(maxlength + padding));
  var boxcontent = getContent(msg, maxlength, borders, padding); // --

  shape.push("".concat(borders.topLeft).concat(borderHorizontal).concat(borders.topRight));
  shape.push("".concat(borders.vertical).concat(blanklines).concat(borders.vertical));
  shape.push.apply(shape, _toConsumableArray(boxcontent));
  shape.push("".concat(borders.vertical).concat(blanklines).concat(borders.vertical));
  shape.push("".concat(borders.bottomLeft).concat(borderHorizontal).concat(borders.bottomRight));
  return shape.join('\n');
};
/**
 * box
 * Returns an ascii-box wrapping the passed message
 * @param {string} msg
 * @param {Object} opts
 * @param {string} opts.border - single, double, code, round, dotted, retro, single-double, double-single
 * @param {string} opts.color - green, red, blue, cyan, magenta, gray, black, white
 * @param {number} opts.padding
 * @param {number} opts.minWidth
 * @param {number} opts.maxWidth
 */


function box(msg, opts) {
  var defaultOpts = {
    border: 'classic',
    // single, double, code, round, dotted, retro, single-double, double-single
    color: 'none',
    // green, red, blue, cyan, magenta, gray, black, white
    padding: 4,
    minWidth: 20,
    maxWidth: 80
  };

  try {
    var allBoxes = _extends({}, _cliBoxes.default, _extraBoxes.extraBoxes);

    var tableOpts = _extends({}, defaultOpts, opts);

    var borders = allBoxes[tableOpts.border];

    var _tableOpts = _extends({}, tableOpts),
        padding = _tableOpts.padding,
        minWidth = _tableOpts.minWidth,
        maxWidth = _tableOpts.maxWidth;

    if (tableOpts.color !== 'none') {
      borders = Object.entries(borders).reduce(function (acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            val = _ref2[1];

        acc[key] = _colors.default[tableOpts.color](val);
        return acc;
      }, {});
    }

    return draw(msg, borders, padding, minWidth, maxWidth);
  } catch (_) {
    return "(no-table)\n".concat(msg);
  }
}